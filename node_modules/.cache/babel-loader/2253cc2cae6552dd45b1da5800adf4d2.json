{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/media/ridoy/Work/Documents/My Project/Project/Port/my-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/media/ridoy/Work/Documents/My Project/Project/Port/my-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/media/ridoy/Work/Documents/My Project/Project/Port/my-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/media/ridoy/Work/Documents/My Project/Project/Port/my-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nvar Particle_1 = require(\"./Particle\");\n\nvar Utils_1 = require(\"../Utils\");\n\nvar InteractionManager_1 = require(\"./Particle/InteractionManager\");\n\nvar Particles = /*#__PURE__*/function () {\n  function Particles(container) {\n    _classCallCheck(this, Particles);\n\n    this.container = container;\n    this.array = [];\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    var canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n  }\n\n  _createClass(Particles, [{\n    key: \"init\",\n    value: function init() {\n      var container = this.container;\n      var options = container.options;\n      var handled = false;\n\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particlesInitialization !== undefined) {\n            handled = plugin.particlesInitialization();\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (!handled) {\n        for (var i = this.count; i < options.particles.number.value; i++) {\n          this.addParticle();\n        }\n      }\n\n      if (options.infection.enable) {\n        for (var _i = 0; _i < options.infection.infections; _i++) {\n          var notInfected = this.array.map(function (p) {\n            return p.infecter;\n          }).filter(function (p) {\n            return p.infectionStage === undefined;\n          });\n          var infected = Utils_1.Utils.itemFromArray(notInfected);\n          infected.startInfection(0);\n        }\n      }\n\n      this.interactionManager.init();\n      container.noise.init();\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      this.clear();\n      this.init();\n      this.draw({\n        value: 0,\n        factor: 0\n      });\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index, quantity) {\n      if (index >= 0 && index <= this.count) {\n        var _iterator2 = _createForOfIteratorHelper(this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var particle = _step2.value;\n            particle.destroy();\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(particle) {\n      this.removeAt(this.array.indexOf(particle));\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      var container = this.container;\n      var particlesToDelete = [];\n      container.noise.update();\n\n      var _iterator3 = _createForOfIteratorHelper(this.array),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _particle = _step3.value;\n\n          _particle.move(delta);\n\n          if (_particle.destroyed) {\n            particlesToDelete.push(_particle);\n            continue;\n          }\n\n          this.quadTree.insert(new Utils_1.Point(_particle.getPosition(), _particle));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      for (var _i2 = 0, _particlesToDelete = particlesToDelete; _i2 < _particlesToDelete.length; _i2++) {\n        var particle = _particlesToDelete[_i2];\n        this.remove(particle);\n      }\n\n      this.interactionManager.externalInteract(delta);\n\n      var _iterator4 = _createForOfIteratorHelper(this.container.particles.array),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _particle2 = _step4.value;\n\n          _particle2.update(delta);\n\n          this.interactionManager.particlesInteract(_particle2, delta);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n      container.canvas.clear();\n      var canvasSize = this.container.canvas.size;\n      this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n      this.update(delta);\n\n      var _iterator5 = _createForOfIteratorHelper(container.plugins),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n              plugin = _step5$value[1];\n\n          container.canvas.drawPlugin(plugin, delta);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(this.array),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var p = _step6.value;\n          p.draw(delta);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.array = [];\n    }\n  }, {\n    key: \"push\",\n    value: function push(nb, mouse, overrideOptions) {\n      var container = this.container;\n      var options = container.options;\n      var limit = options.particles.number.limit * container.density;\n      this.pushing = true;\n\n      if (limit > 0) {\n        var countToRemove = this.count + nb - limit;\n\n        if (countToRemove > 0) {\n          this.removeQuantity(countToRemove);\n        }\n      }\n\n      for (var i = 0; i < nb; i++) {\n        this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n      }\n\n      if (!options.particles.move.enable) {\n        this.container.play();\n      }\n\n      this.pushing = false;\n    }\n  }, {\n    key: \"addParticle\",\n    value: function addParticle(position, overrideOptions) {\n      try {\n        var particle = new Particle_1.Particle(this.container, position, overrideOptions);\n        this.array.push(particle);\n        return particle;\n      } catch (_a) {\n        console.log(\"error adding particle\");\n        return;\n      }\n    }\n  }, {\n    key: \"removeQuantity\",\n    value: function removeQuantity(quantity) {\n      var options = this.container.options;\n      this.removeAt(0, quantity);\n\n      if (!options.particles.move.enable) {\n        this.container.play();\n      }\n    }\n  }, {\n    key: \"count\",\n    get: function get() {\n      return this.array.length;\n    }\n  }]);\n\n  return Particles;\n}();\n\nexports.Particles = Particles;","map":null,"metadata":{},"sourceType":"script"}