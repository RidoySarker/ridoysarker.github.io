{"ast":null,"code":"var attributesToProps = require('./attributes-to-props');\n\nvar utilities = require('./utilities');\n/**\n * Converts DOM nodes to React elements.\n *\n * @param {DomElement[]} nodes - The DOM nodes.\n * @param {Object} [options={}] - The additional options.\n * @param {Function} [options.replace] - The replacer.\n * @param {Object} [options.library] - The library (React, Preact, etc.).\n * @return {String|ReactElement|ReactElement[]}\n */\n\n\nfunction domToReact(nodes, options) {\n  options = options || {};\n\n  var React = options.library || require('react');\n\n  var cloneElement = React.cloneElement;\n  var createElement = React.createElement;\n  var isValidElement = React.isValidElement;\n  var result = [];\n  var node;\n  var hasReplace = typeof options.replace === 'function';\n  var replaceElement;\n  var props;\n  var children;\n  var data;\n  var trim = options.trim;\n\n  for (var i = 0, len = nodes.length; i < len; i++) {\n    node = nodes[i]; // replace with custom React element (if present)\n\n    if (hasReplace) {\n      replaceElement = options.replace(node);\n\n      if (isValidElement(replaceElement)) {\n        // set \"key\" prop for sibling elements\n        // https://fb.me/react-warning-keys\n        if (len > 1) {\n          replaceElement = cloneElement(replaceElement, {\n            key: replaceElement.key || i\n          });\n        }\n\n        result.push(replaceElement);\n        continue;\n      }\n    }\n\n    if (node.type === 'text') {\n      // if trim option is enabled, skip whitespace text nodes\n      if (trim) {\n        data = node.data.trim();\n\n        if (data) {\n          result.push(node.data);\n        }\n      } else {\n        result.push(node.data);\n      }\n\n      continue;\n    }\n\n    props = node.attribs;\n\n    if (!shouldPassAttributesUnaltered(node)) {\n      props = attributesToProps(node.attribs);\n    }\n\n    children = null;\n\n    switch (node.type) {\n      case 'script':\n      case 'style':\n        // prevent text in <script> or <style> from being escaped\n        // https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml\n        if (node.children[0]) {\n          props.dangerouslySetInnerHTML = {\n            __html: node.children[0].data\n          };\n        }\n\n        break;\n\n      case 'tag':\n        // setting textarea value in children is an antipattern in React\n        // https://reactjs.org/docs/forms.html#the-textarea-tag\n        if (node.name === 'textarea' && node.children[0]) {\n          props.defaultValue = node.children[0].data;\n        } else if (node.children && node.children.length) {\n          // continue recursion of creating React elements (if applicable)\n          children = domToReact(node.children, options);\n        }\n\n        break;\n      // skip all other cases (e.g., comment)\n\n      default:\n        continue;\n    } // set \"key\" prop for sibling elements\n    // https://fb.me/react-warning-keys\n\n\n    if (len > 1) {\n      props.key = i;\n    }\n\n    result.push(createElement(node.name, props, children));\n  }\n\n  return result.length === 1 ? result[0] : result;\n}\n/**\n * Determines whether attributes should be altered or not.\n *\n * @param {React.ReactElement} node\n * @return {Boolean}\n */\n\n\nfunction shouldPassAttributesUnaltered(node) {\n  return utilities.PRESERVE_CUSTOM_ATTRIBUTES && node.type === 'tag' && utilities.isCustomComponent(node.name, node.attribs);\n}\n\nmodule.exports = domToReact;","map":null,"metadata":{},"sourceType":"script"}